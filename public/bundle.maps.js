{
  "version": 3,
  "sources": [
    "../../../Users/berna/AppData/Roaming/npm/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "events.js"
  ],
  "names": [],
  "mappings
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()",
    "//const debounce = require(\"lodash.debounce\");\r\n\r\n// Control variables\r\nvar ghostNodeClick = false;\r\nvar ghostNodeHolder = null;\r\nvar mainModalOpen = false;\r\n\r\n// ---------------------------------------------\r\n//             authenticate client\r\n// ---------------------------------------------\r\nvar spotifyToken;\r\n\r\ngetSpotifyToken();\r\nasync function getSpotifyToken() {\r\n  spotifyToken = await fetch(\"/token\").then(function(res) {\r\n    return res.text();\r\n  });\r\n\r\n  spotifyGetParams = {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: \"Bearer \" + spotifyToken\r\n    },\r\n    mode: \"cors\",\r\n    cache: \"default\"\r\n  };\r\n}\r\n\r\n// ---------------------------------------------\r\n//             modal controls\r\n// ---------------------------------------------\r\n\r\nMicroModal.show(\"main-modal\");\r\n\r\nfunction showLoader() {MicroModal.show(\"loading-modal\");}\r\nfunction closeLoader() {MicroModal.close(\"loading-modal\");}\r\n\r\n\r\nconst onMainModalClose = function() {\r\n  mainModalOpen = false;\r\n  searchBar.value = \"\";\r\n};\r\n\r\nconst onMainModalShow = function() {\r\n  mainModalOpen = true;\r\n};\r\n\r\n// ---------------------------------------------\r\n//               document events\r\n// ---------------------------------------------\r\n\r\ndocument.onkeypress = function(e) {\r\n  e = e || window.event;\r\n  let charCode = typeof e.which == \"number\" ? e.which : e.keyCode;\r\n  if (charCode && !mainModalOpen) {\r\n    MicroModal.show(\"main-modal\", {\r\n      onClose: onMainModalClose,\r\n      onShow: onMainModalShow\r\n    });\r\n  }\r\n};\r\n\r\n\r\ndocument.body.addEventListener(\"mousemove\", function(e) {\r\n  mouseX = e.clientX - bounds.left;\r\n  mouseY = e.clientY - bounds.top;\r\n\r\n  if (ghostNodeHolder != null) {\r\n    let nodeX = mouseX - parentNodeSize * network.getScale();\r\n    let nodeY = mouseY - parentNodeSize * network.getScale() + bounds.top;\r\n\r\n    ghostNodeHolder.style.left = nodeX + \"px\";\r\n    ghostNodeHolder.style.top = nodeY + \"px\";\r\n\r\n    let ghostNodeClickHandler = function(e) {\r\n      ghostNodeClick = true;\r\n    };\r\n\r\n    ghostNodeHolder.addEventListener(\"click\", ghostNodeClickHandler);\r\n\r\n    if (ghostNodeClick) {\r\n      let clickedArtistId = ghostNodeHolder.getAttribute(\"data-artistId\");\r\n      let canvasCoords = network.DOMtoCanvas({ x: mouseX, y: mouseY });\r\n      ghostNodeHolder.parentNode.removeChild(ghostNodeHolder);\r\n\r\n      showLoader();\r\n\r\n      document.body.removeEventListener(\"click\", ghostNodeClickHandler);\r\n\r\n      ghostNodeClick = false;\r\n      ghostNodeHolder = null;\r\n    }\r\n  }\r\n});\r\n\r\n// ---------------------------------------------\r\n//                autocomplete\r\n// ---------------------------------------------\r\n\r\nconst searchBar = document.getElementById(\"search-bar\");\r\nautocomplete(searchBar);\r\n\r\nfunction autocomplete(searchBar) {\r\n  let currentFocus;\r\n\r\n  // listen for user input in the search bar\r\n  searchBar.addEventListener(\"input\", function(e) {\r\n    let searchInput = e.target.value;\r\n    currentFocus = -1;\r\n\r\n    closeAllLists();\r\n\r\n    debounce(async function() {\r\n      let artistList = await searchArtists(searchInput);\r\n\r\n      let acContainerElmnt = document.createElement(\"DIV\");\r\n      acContainerElmnt.setAttribute(\"id\", this.id + \"autocomplete-list\");\r\n      acContainerElmnt.setAttribute(\"class\", \"autocomplete-items\");\r\n      document.getElementById(\"main-form\").appendChild(acContainerElmnt);\r\n\r\n      // construct list of artist search results\r\n      for (let i = 0; i < artistList.length; i++) {\r\n        let acItemElmnt = document.createElement(\"DIV\");\r\n        if (artistList[i].description) {\r\n          acItemElmnt.innerHTML =\r\n            artistList[i].name + \" - <i>\" + artistList[i].description + \"</i>\";\r\n        } else {\r\n          acItemElmnt.innerHTML = artistList[i].name;\r\n        }\r\n        acItemElmnt.innerHTML +=\r\n          \"<input type='hidden' value='\" +\r\n          artistList[i].name +\r\n          \"' data-artistid='\" +\r\n          artistList[i].id +\r\n          \"'>\";\r\n\r\n        // Creates 'add' button\r\n        let acAddBtnElmnt = document.createElement(\"button\");\r\n        acAddBtnElmnt.setAttribute(\"class\", \"btn btn-success btn-lg  autocomplete-btn\");\r\n        acAddBtnElmnt.innerHTML = \"+\";\r\n        acItemElmnt.appendChild(acAddBtnElmnt);\r\n        acAddBtnElmnt.addEventListener(\"click\", e => onClickAddItem(e));  // On 'add' button click  \r\n        acItemElmnt.addEventListener(\"click\", e => onClickItem(e)); // On search item click\r\n        acContainerElmnt.appendChild(acItemElmnt);\r\n      }\r\n    }, 800);\r\n  });\r\n\r\n  /*execute a function presses a key on the keyboard:*/\r\n  searchBar.addEventListener(\"keydown\", function(e) {\r\n    // gets the list\r\n    let x = document.getElementById(this.id + \"autocomplete-list\");\r\n    // if we do have a list...\r\n    if (x) {\r\n      x = x.getElementsByTagName(\"div\");\r\n    }\r\n    if (e.keyCode == 40) {\r\n      /*If the arrow DOWN key is pressed, increase the currentFocus variable:*/\r\n      currentFocus++;\r\n      /*and and make the current item more visible:*/\r\n      addActive(x);\r\n    } else if (e.keyCode == 38) {\r\n      //up\r\n      /*If the arrow UP key is pressed,\r\n          decrease the currentFocus variable:*/\r\n      currentFocus--;\r\n      /*and and make the current item more visible:*/\r\n      addActive(x);\r\n    } else if (e.keyCode == 13) {\r\n      /*If the ENTER key is pressed, prevent the form from being submitted,*/\r\n      e.preventDefault();\r\n      if (currentFocus > -1) {\r\n        /*and simulate a click on the \"active\" item:*/\r\n        if (x) x[currentFocus].click();\r\n      }\r\n    }\r\n  });\r\n\r\n  function addActive(x) {\r\n    /*a function to classify an item as \"active\":*/\r\n    if (!x) return false;\r\n    /*start by removing the \"active\" class on all items:*/\r\n    removeActive(x);\r\n    if (currentFocus >= x.length) currentFocus = 0;\r\n    if (currentFocus < 0) currentFocus = x.length - 1;\r\n    /*add class \"autocomplete-active\":*/\r\n    x[currentFocus].classList.add(\"autocomplete-active\");\r\n  }\r\n  function removeActive(x) {\r\n    /*a function to remove the \"active\" class from all autocomplete items:*/\r\n    for (let i = 0; i < x.length; i++) {\r\n      x[i].classList.remove(\"autocomplete-active\");\r\n    }\r\n  }\r\n\r\n  /*execute a function when someone clicks in the document:*/\r\n  document.addEventListener(\"click\", function(e) {\r\n    closeAllLists(e.target);\r\n  });\r\n}\r\n\r\nasync function onClickItem(e) {\r\n  e.stopPropagation();\r\n  console.log(\"Network restarting...\");\r\n  let artistId = e.target\r\n    .getElementsByTagName(\"input\")[0]\r\n    .getAttribute(\"data-artistid\");\r\n\r\n  MicroModal.close(\"main-modal\");\r\n\r\n  closeAllLists();\r\n  showLoader();\r\n\r\n  let resJSON = await getArtistInfo(artistId);\r\n\r\n  closeLoader();\r\n  clearNetwork();\r\n  startNetwork(resJSON);\r\n}\r\n\r\nfunction closeAllLists() {\r\n  let items = document.getElementsByClassName(\"autocomplete-items\");\r\n  for (let i = 0; i < items.length; i++) {\r\n    items[i].parentNode.removeChild(items[i]);\r\n  }\r\n}\r\n\r\nasync function onClickAddItem(e) {\r\n  e.stopPropagation();\r\n\r\n  closeAllLists();\r\n\r\n  MicroModal.close(\"main-modal\");\r\n\r\n  let clickedArtistId = this.parentNode\r\n    .getElementsByTagName(\"input\")[0]\r\n    .getAttribute(\"data-artistid\");\r\n  let clickedArtistName = this.parentNode.getElementsByTagName(\"input\")[0]\r\n    .value;\r\n\r\n  // Get artist image from spotify to render node\r\n  if (network == null) {\r\n    // Loading animation\r\n    showLoader();\r\n\r\n    console.time(\"show\");\r\n    fetch(\"/show\", params)\r\n      .then(function(response) {\r\n        return response.json();\r\n      })\r\n      .then(function(resJson) {\r\n        console.time(\"show\");\r\n        // deletes the network and restarts it with the newly selected artist's data\r\n        console.time(\"render\");\r\n        closeLoader();\r\n        clearNetwork();\r\n        startNetwork(resJson);\r\n        console.time(\"render\");\r\n      });\r\n  } else {\r\n    // Pass selected artist information to server to render node\r\n    // let params = {\r\n    //   method: \"POST\",\r\n    //   headers: {\r\n    //     \"content-type\": \"application/json\"\r\n    //   },\r\n    //   body: JSON.stringify({\r\n    //     \"artist-id\": clickedArtistId,\r\n    //     \"artist-name\": clickedArtistName\r\n    //   })\r\n    // };\r\n\r\n    fetch(\"/add\", params)\r\n      .then(function(res) {\r\n        return res.json();\r\n      })\r\n      .then(function(resJSON) {\r\n        ghostNodeHolder = document.createElement(\"img\");\r\n        ghostNodeHolder.setAttribute(\"id\", \"ghostNode\");\r\n        ghostNodeHolder.setAttribute(\"class\", \"ghost-node rounded-circle\");\r\n        ghostNodeHolder.setAttribute(\"width\", 320 * network.getScale());\r\n        ghostNodeHolder.setAttribute(\"height\", 320 * network.getScale());\r\n        ghostNodeHolder.src = resJSON[\"image\"];\r\n        ghostNodeHolder.setAttribute(\"data-artistId\", clickedArtistId);\r\n        document.body.appendChild(ghostNodeHolder);\r\n      });\r\n  }\r\n}\r\n"
  ]
}